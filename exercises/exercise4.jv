pipeline TemperaturePipeline {
// Creating an automated data pipeline
    TemperatureZipExtractor
        -> TemperatureZipArchiveInterpreter
        -> TemperatureFilePicker
        -> TemperatureTextFileInterpreter
        -> TemperatureCSVInterpreter
        -> TemperatureColumnDeleter
        -> TemperatureColDataSelector
        -> TemperatureTableInterpreter
        -> CelsiusToFahrenheitTemperature
        -> CelsiusToFahrenheitBatteryTemperature
        -> TemperatureSQLloader;

    // Step 1: Download and extract the ZIP file
    block TemperatureZipExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block TemperatureZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block TemperatureFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TemperatureTextFileInterpreter oftype TextFileInterpreter {
    }

    // Step 2: Interpret the CSV file
    block TemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // Step 3: Remove unwanted columns
    block TemperatureColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I];
    }

    // Step 4: Select required data range
    block TemperatureColDataSelector oftype CellRangeSelector {
        select: range A1:J*;
    }

    // Step 5: Defining table structure and rename columns
    block TemperatureTableInterpreter oftype TableInterpreter {
        header: false;
        columns: [
            "id" oftype ValidID,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype Month,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    // Step 6: Convert Celsius to Fahrenheit for temperatures
    block CelsiusToFahrenheitTemperature oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        use: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitBatteryTemperature oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        use: CelsiusToFahrenheit;
    }

    // Step 7: Load data into SQLite database
    block TemperatureSQLloader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}

// Transformation logic: Convert Celsius to Fahrenheit
transform CelsiusToFahrenheit {
    from Celsius oftype decimal;
    to Fahrenheit oftype decimal;
    Fahrenheit: (Celsius * 9/5) + 32;
}


valuetype ValidID oftype integer {
    constraints: [
        GreaterthanZero,
    ];
}


constraint GreaterthanZero on integer:
    value > 0;

// Validation: Month  between 1 and 12
valuetype Month oftype integer {
    constraints: [
        MonthRange,
    ];
}

constraint MonthRange oftype RangeConstraint {
    lowerBound: 1;
    lowerBoundInclusive: true;
    upperBound: 12;
    upperBoundInclusive: true;
}
